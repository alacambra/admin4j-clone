<?xml version="1.0"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
	<header>
		<title>Thread Contention Issue Management</title>
		<notice>Copyright © 2010, by The Admin4J Project, all rights reserved.</notice>
	</header>
	<body>
	
		<section>
							<title>Detecting thread contention problems at runtime</title>
							
							<p>The Admin4J thread contention monitor will notify administators of threading issues.
								A 'threading issue' is an observation that an active thread in the JVM is blocking other
								threads for longer than a given threshold.  </p>
								
							<p>Thread contention issues will often appear to application users s "slow" performance.</p>
								
							<p>The thread contention monitor operates on a work/sleep cycle.  You specify the contention threshold
							  by controlling the length of the sleep interval and the number of threads that must be "blocked" to
							  report the contention.  This allows you to tune away false reports of contention issues.</p>
		</section>
							  
		<section>
						<title>Installing Thread Contention Monitoring</title>
						
						<note>If you followed the installation procedure detailed in the <a href="getting-started.html">Getting Started</a>
								section, there is no need to install the thread contention monitor separately.  Only follow this procedure if you're
						 		not using the Admin4J Home Page Servlet.</note>

						<p>Add the following servlet to your applications web.xml:</p>
						<source><![CDATA[
<servlet>
<servlet-name>Thread Monitor Startup Servlet </servlet-name>
<servlet-class>net.admin4j.ui.servlets.ThreadMonitorStartupServlet</servlet-class>
<load-on-startup>1</load-on-startup>
</servlet>
						]]></source>

						<p>Note that there is no servlet mapping as there is nothing to display.  The monitor is started
							 with the initialization of the startup servlet.</p>

						<p>The following configuration parameters are supported for the thread contention monitor.  You specify
							 these parameters as init parametes on the startup servlet:</p>
							 <table>
								<tr>
									<th>Parameter</th>
									<th>Required</th>
									<th>Default</th>
									<th>Description</th>
							 </tr>
							 <tr>
									<td>sleep.interval.millis</td>
									<td>N</td>
									<td>Default 30000 (30 sec)</td>
									<td>Amount of time in millis monitor will sleep between checks.</td>					 
							 </tr>
							 <tr>
									<td>max.blocked.threads</td>
									<td>N</td>
									<td>2</td>
									<td>Number of blocked threads monitor will tolerate before notification.</td>					 
							 </tr>
							 <tr>
									<td>notifier</td>
									<td>Y</td>
									<td>Defaults to default.notifier.class value in the Admin4J configuration.</td>
									<td>Handles admin notification.  See documentation for the Notifier you're using
											for any additional configuration requirements. See Admin4J Notifiers section
											for more detail.</td>					 
							 </tr>
							</table>

		</section>

		<section>
							<title>Monitoring thread contention in containers servicing multiple applications.</title>

							<p>You only need one thread contention monitor per JVM.  If the container you which to monitor services
								 multiple applications, it's on necessary to install the thread monitor startup servlet in one of 
								 those applications.</p>

		</section>

		<section>
						<title>How to respond to contention notifications</title>

						<p>Some amount of contention is natural and unavoidable.  A single isolated notification
							from time to time most likely warrants no action.</p>

						<p>The notification will provide detail on the active thread and the threads that are being
							blocked.</p>

						<p>Once you've located the blocking class and method, there are two basic strategies.  First,
							 find ways to minimize calls to the blocking class and method.  Second, refactor the
							 offending code so to minimize the synchronization that must occur.</p>
		</section>
		
	
	</body>
	<footer>
		<legal>Copyright © 2010, by The Admin4J Project, all rights reserved.</legal>
	</footer>
</document>
